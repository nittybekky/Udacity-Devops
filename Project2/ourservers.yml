Description: >
    Udagram Services Infrastructure Stack - By Goodness Abarugo.
     
    This stack creates a launch configuration that deploys four servers, two located in each of 
    the private subnets deployed using the network stack. The launch configuration will be used by 
    an auto-scaling group.
    An Ubuntu 18 AMI and a t3.medium Instance(uses two vCPUs and up to 4GB of RAM) is used. Finally, 
    a disk space of at least 10GB is set.
    In addition, scaling policies are set up to instruct the autoscaling on how and when to spin up 
    instances. Cloudwatch Alarms are set up to be triggered when CPU utilization goes above or below 
    certain thresholds. When any of the alarms is triggered, the right scaling policy is executed.


Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "MyUdacityProject2"

  HostIP:
    Description: My current local device dynamic IP
    Type: String
    Default: ""

  # KeyName:
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: 'ProjectKey'
  #   Description: KeyName for this stack stored in Param
  #   Really Got stuck on this one. Will do more research!

  KeyPairName:
    Description: Keypair for Linux bastion host
    Type: AWS::EC2::KeyPair::KeyName
    Default: jumpbox
    
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-22ce4934
    us-west-1:
      AMI: ami-9e247efe
    us-east-2:
      AMI: ami-7bfcd81e
    us-west-2:
      AMI: ami-8ca83fec

Resources:

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
      Path: "/"

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        # CidrIp: 0.0.0.0/0
        CidrIp: !Sub "${HostIP}/32"
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          # echo "Udacity Demo Web Server Up and Running!" > index.html          
          aws s3 cp s3://udagram-mini-site/udagram.zip .
          unzip -o udagram.zip
      ImageId: ami-0729e439b6769d6ab
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      # ToDo: Change the key-pair name, as applicable to you. 
      # KeyName: s3userdata
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

# --------------------JumpBox---------------------
  LinuxBastionHost:
    Type: AWS::EC2::Instance
    # DependsOn:
    # - AttachGateway
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        Description: ENI for bastion host
        DeviceIndex: '0'
        SubnetId:
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-PUB1-SN"
        GroupSet:
        - !Ref 'WebServerSecGroup'
      


#---------------- Scaling Policies ---------------

  # Specifies an Amazon EC2 Auto Scaling scaling policy and CloudWatch alarms that monitors CloudWatch metrics for our
  # Auto Scaling group.
  
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebAppGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebAppGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebAppGroup'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebAppGroup'
      ComparisonOperator: LessThanThreshold


# -------------Output ------------

Outputs:

  URL:
    Description: The URL of the website
    Value: !Join ['', ['http://', !GetAtt [WebAppLB, DNSName]]]
    Export:
      Name: !Sub ${EnvironmentName}-SireURL

